# All available options are described here:
# http://clang.llvm.org/docs/ClangFormatStyleOptions.html
---
Language:                                  Cpp
AccessModifierOffset:                      -4
AlignAfterOpenBracket:                     DontAlign
AlignConsecutiveAssignments:               false
AlignConsecutiveDeclarations:              false
AlignEscapedNewlinesLeft:                  false
AlignOperands:                             false
AlignTrailingComments:                     true
AllowAllParametersOfDeclarationOnNextLine: false
AllowShortBlocksOnASingleLine:             false
AllowShortCaseLabelsOnASingleLine:         false
AllowShortFunctionsOnASingleLine:          Inline
AllowShortIfStatementsOnASingleLine:       false
AllowShortLoopsOnASingleLine:              false
AlwaysBreakAfterDefinitionReturnType:      None
AlwaysBreakAfterReturnType:                All
AlwaysBreakBeforeMultilineStrings:         false
AlwaysBreakTemplateDeclarations:           true
BinPackArguments:                          true
BinPackParameters:                         true
BraceWrapping:
  AfterClass:                              false
  AfterControlStatement:                   false
  AfterEnum:                               false
  AfterFunction:                           true
  AfterNamespace:                          false
  AfterObjCDeclaration:                    false
  AfterStruct:                             false
  AfterUnion:                              false
  BeforeCatch:                             false
  BeforeElse:                              false
  IndentBraces:                            false
BreakBeforeBinaryOperators:                NonAssignment
BreakBeforeBraces:                         Custom
BreakBeforeTernaryOperators:               true
BreakConstructorInitializersBeforeComma:   false
BreakAfterJavaFieldAnnotations:            false
BreakStringLiterals:                       true
ColumnLimit:                               100
CommentPragmas:                            '^ IWYU pragma:'
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth:         4
ContinuationIndentWidth:                   4
Cpp11BracedListStyle:                      true
DerivePointerAlignment:                    false
ForEachMacros:                             [ foreach, Q_FOREACH, BOOST_FOREACH ]
IncludeCategories:
  - Regex:                                 '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:                              2
  - Regex:                                 '^(<|"(gtest|isl|json)/)'
    Priority:                              3
  - Regex:                                 '.*'
    Priority:                              1
IncludeIsMainRegex:                        '$'
IndentCaseLabels:                          false
IndentWidth:                               4
IndentWrappedFunctionNames:                false
KeepEmptyLinesAtTheStartOfBlocks:          false
MaxEmptyLinesToKeep:                       1
NamespaceIndentation:                      Inner
PenaltyBreakBeforeFirstCallParameter:      100
PenaltyBreakComment:                       300
PenaltyBreakFirstLessLess:                 120
PenaltyBreakString:                        1000
PenaltyExcessCharacter:                    1000000
PenaltyReturnTypeOnItsOwnLine:             60
PointerAlignment:                          Right
ReflowComments:                            true
SortIncludes:                              false
SpaceAfterCStyleCast:                      true
SpaceBeforeAssignmentOperators:            true
SpaceBeforeParens:                         ControlStatements
SpaceInEmptyParentheses:                   false
SpacesBeforeTrailingComments:              1
SpacesInAngles:                            false
SpacesInContainerLiterals:                 false
SpacesInCStyleCastParentheses:             false
SpacesInParentheses:                       false
SpacesInSquareBrackets:                    false
Standard:                                  Cpp11
TabWidth:                                  4
UseTab:                                    Never

